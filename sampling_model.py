# -*- coding: utf-8 -*-
"""Sampling_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OyqFda3Nqft00Zfj01lP1C2RzZcEqk_j
"""

import numpy as np
import pandas as pd
import datetime as dt
import re
import matplotlib.pyplot as plt
import seaborn as sns
import math
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split, cross_val_score

from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier

from sklearn.metrics import confusion_matrix, precision_score, recall_score
from sklearn.metrics import accuracy_score 
from sklearn.metrics import roc_curve, auc
from Report_BI_tool_check_POD_version3_1 import read_folder_pod_resultQA_in_month as ff
import pickle

def convert_reason(s):
  x=s
  if x=='Người nhận không nghe máy': x=1
  elif x=='Khách hàng yêu cầu thay đổi ngày/giờ giao': x=2
  elif x=='Khách hàng muốn hủy đơn hàng': x=3
  elif x=='Số điện thoại không chính xác': x=4
  elif x=='Giao sai hàng hóa - Đã đồng kiểm': x=5
  elif x=='Không đủ thời gian để tài xế hoàn thành lộ trình': x=6
  elif x=='Khách không đặt hàng': x=7
  elif x=='Khách hàng yêu cầu thay đổi địa điểm giao hàng': x=8
  elif x=='Khách hàng đặt trùng đơn hàng': x=9
  elif x=='Từ chối do không cho phép đồng kiểm': x=10
  elif x=='Bị trì hoãn do thiên tai hoặc những trường hợp khẩn cấp': x=11
  elif x=='Bị hư hỏng - Đã đồng kiểm': x=12
  elif x=='Địa chỉ nằm ngoài khu vực giao hàng': x=13
  elif x=='Giao sai hàng hóa - Chưa đồng kiểm': x=14
  elif x=='Shop báo hủy đơn hàng': x=15
  else: x=16
  return x

def data_preprocessing(start_day, end_day):
  df = ff(start_day, end_day)
  df = df[(df['result']!='need_to_check')]
  df = df[['reason',	'hub_id', 'region',  'waypoint_id', 'Fail attempt sau 10PM',	'Lịch sử tối thiểu 3 cuộc gọi ra',	
             'Thời gian giữa mỗi cuộc gọi tối thiểu 1p',	'Thời gian gọi sớm hơn hoặc bằng thời gian xử lý thất bại',	
             'Tối thiểu 3 cuộc gọi với thời gian đổ chuông >10s trong trường hợp khách không nghe máy',	'Không có cuộc gọi thành công',
             'final_result', 'Không có cuộc gọi tiêu chuẩn',	'Không có hình ảnh POD']]
  df['reason'] = df['reason'].map(lambda x: str(x).strip()).map(lambda x: re.sub(' {2,}', ' ', x)).map(lambda x: x.replace(';',''))
  #Tạo dummy variable
  region_dummy = pd.get_dummies(df['region'], prefix='region')
  #Xóa cột Region và ghép dummy variable vào df
  df= pd.concat([df, region_dummy], axis=1)
  df.drop(['region'], axis=1, inplace=True)
  df['reason'] = df['reason'].map(lambda x: convert_reason(x))

  #Tạo dummy variable
  final_reason_dummy = pd.get_dummies(df['reason'], prefix='reason')
  #Xóa cột final_reason và ghép dummy variable vào data
  df = pd.concat([df, final_reason_dummy], axis=1)
  # df.drop(['final_reason'], axis=1, inplace=True)
  return df

def trainning(start_dat, end_day):
  df = data_preprocessing(start_dat, end_day)
  # Chia data thành 2 phần biến độc lập X và biến phụ thuộc y
  X = df.drop(columns={'waypoint_id', 'hub_id', 'final_result'}, axis=1).copy()
  y = df['final_result'].copy()

  # Chia data thành train-test theo tỉ lệ 8:2
  # X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1, stratify=y)
  X_train = X.iloc[:500000, :]
  X_test = X.iloc[500000:, :]
  y_train = y.iloc[:500000]
  y_test = y.iloc[500000:]

  nb = GaussianNB()

  nb.fit(X_train, y_train)
 
  #Save the model to file in the current working directory
  pickle_file_name = "/content/drive/MyDrive/VN-QA/29. QA - Data Analyst/FakeFail/Sampling model/NaiveBayes_model.pkl"  

  with open(pickle_file_name, 'wb') as file:  
      pickle.dump(nb, file)

# trainning("2022-10-20", "2022-12-17")

