# -*- coding: utf-8 -*-
"""data_sample.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BpDaLzy-Gfd9f3hNGC9jQ4F2sOL9GwzT
"""

import pandas as pd
import matplotlib.pyplot as plt
from Report_BI_tool_check_POD_version3_1 import read_folder_pod_resultQA_in_month as ff
import re 
import pickle
import numpy as np

#gán nhãn cho biến reason
def convert_reason(s):
  x=s
  if x=='Người nhận không nghe máy': x=1
  elif x=='Khách hàng yêu cầu thay đổi ngày/giờ giao': x=2
  elif x=='Khách hàng muốn hủy đơn hàng': x=3
  elif x=='Số điện thoại không chính xác': x=4
  elif x=='Giao sai hàng hóa - Đã đồng kiểm': x=5
  elif x=='Không đủ thời gian để tài xế hoàn thành lộ trình': x=6
  elif x=='Khách không đặt hàng': x=7
  elif x=='Khách hàng yêu cầu thay đổi địa điểm giao hàng': x=8
  elif x=='Khách hàng đặt trùng đơn hàng': x=9
  elif x=='Từ chối do không cho phép đồng kiểm': x=10
  elif x=='Bị trì hoãn do thiên tai hoặc những trường hợp khẩn cấp': x=11
  elif x=='Bị hư hỏng - Đã đồng kiểm': x=12
  elif x=='Địa chỉ nằm ngoài khu vực giao hàng': x=13
  elif x=='Giao sai hàng hóa - Chưa đồng kiểm': x=14
  elif x=='Shop báo hủy đơn hàng': x=15
  else: x=16
  return x

def extract_data(start_day, end_day):
  data = ff(start_day, end_day)
  data = data[(data['driver_type']!='fulltime')]
  data = data[(data['result']=='need_to_check')]
  data = data[['reason',	'hub_id', 'region', 'driver_id', 'waypoint_id', 'Fail attempt sau 10PM',	'Lịch sử tối thiểu 3 cuộc gọi ra',	
             'Thời gian giữa mỗi cuộc gọi tối thiểu 1p',	'Thời gian gọi sớm hơn hoặc bằng thời gian xử lý thất bại',	
             'Tối thiểu 3 cuộc gọi với thời gian đổ chuông >10s trong trường hợp khách không nghe máy',	'Không có cuộc gọi thành công',
             'final_result', 'Không có cuộc gọi tiêu chuẩn',	'Không có hình ảnh POD']]

  # clear reason
  data['reason'] = data['reason'].map(lambda x: str(x).strip()).map(lambda x: re.sub(' {2,}', ' ', x)).map(lambda x: x.replace(';',''))

  #Tạo dummy variable
  region_dummy = pd.get_dummies(data['region'], prefix='region')
  #Xóa cột Region và ghép dummy variable vào data
  data= pd.concat([data, region_dummy], axis=1)
  data.drop(['region'], axis=1, inplace=True)

  data['reason'] = data['reason'].map(lambda x: convert_reason(x))

  #Tạo dummy variable
  final_reason_dummy = pd.get_dummies(data['reason'], prefix='reason')
  #Xóa cột final_reason và ghép dummy variable vào data
  data = pd.concat([data, final_reason_dummy], axis=1)
  return data

def predict(start_day, end_day):
  df = extract_data(start_day, end_day)
  X = df.drop(columns={'waypoint_id', 'driver_id', 'hub_id', 'final_result'})
  model = pickle.load(open('/content/drive/MyDrive/VN-QA/29. QA - Data Analyst/FakeFail/Sampling model/NaiveBayes_model.pkl', 'rb'))
  y_pre = model.predict(X)
  result=pd.DataFrame(y_pre, columns=['final_result'])

  data = ff(start_day, end_day)
  data = data[data['result']=='need_to_check']
  data = data[(data['driver_type'] != 'fulltime')]

  sample = data.iloc[result[result['final_result']==1].index]
  sample = sample[(sample['driver_type']!='fulltime')]
  return sample

def driver_finder(x):
    if 'NEXT' in x: return 'fulltime'
    elif 'FRLA' in x: return 'freelancer'
    elif( 'FTS' in x) | ('AGAR' in x) | ('189-FRLA' in x) | ('518-FRLA' in x) | ('XDOCT' in x) | ('TSS' in x) | ('GRAB' in x) | ('RAGA' in x) |('AHA' in x) : return '3PLs'
    else: return 'others'
def check(x):
  if x > 80.0:
    return 0
  elif (x <= 80.0) & (x>=30.0):
    return 1
  else:
    return 2

def percent_ff(link_pod_manual_check, start_day, end_day):
  df = pd.read_csv(link_pod_manual_check)
  df['driver_type'] =  df.driver_name.apply(driver_finder)
  df1_nonfull = df[~(df['driver_type']=='fulltime')]
  sum_fail_waypoints = pd.DataFrame(df1_nonfull.groupby(['driver_id'])['fail_waypoints_on_route'].sum()).reset_index().rename(columns={'fail_waypoints_on_route':'sum_fail_waypoints'})
  sum_success_waypoints = pd.DataFrame(df1_nonfull.groupby(['driver_id'])['success_waypoints_on_route'].sum()).reset_index().rename(columns={'success_waypoints_on_route':'sum_success_waypoints'})
  percent_fail = sum_fail_waypoints.merge(sum_success_waypoints, how='inner', on='driver_id')
  percent_fail['total'] = percent_fail['sum_success_waypoints'] + percent_fail['sum_fail_waypoints']
  
  percent_fail['percent_fail'] = percent_fail['sum_fail_waypoints']*100/percent_fail['total']
  percent_fail['label'] = 0
  percent_fail['label'] = percent_fail['percent_fail'].apply(lambda x: check(x))
  

  sample = predict(start_day, end_day)
  sample = sample.merge(percent_fail, how='inner', on='driver_id')

  #Lấy mẫu 50% với data có tỷ lệ fail là 80, 15% với data có tỷ lệ fail là 30%-80% và 5% với lượng data còn lại
  sample_80 = sample[sample['label']==0].sample(frac=0.5)
  sample_3080 = sample[sample['label']==1].sample(frac=0.15)
  sample_30 = sample[sample['label']==2].sample(frac=0.05)
  final_sample = pd.concat([sample_80, sample_3080, sample_30])
  return final_sample

def sample_data(link_pod_manual_check, start_day, end_day):
  df = percent_ff(link_pod_manual_check, start_day, end_day)
  if df.shape[0] < 11000:
    return df
  data = pd.DataFrame({
    'tracking_id':[], 'callee':[], 'attempt_datetime':[], 'reason':[], 'pod_photo':[],
       'hub_id':[], 'hub_name':[], 'region':[], 'driver_id':[], 'driver_name':[],
       'driver_contact':[], 'transaction_id':[], 'waypoint_id':[], 'waypoint_photo_id':[],
       'order_id':[], 'route_id':[], 'attempt_date':[], 'reason_no':[],
       'Fail attempt sau 10PM':[], 'Lịch sử tối thiểu 3 cuộc gọi ra':[],
       'Thời gian giữa mỗi cuộc gọi tối thiểu 1p':[],
       'Thời gian gọi sớm hơn hoặc bằng thời gian xử lý thất bại':[],
       'Tối thiểu 3 cuộc gọi với thời gian đổ chuông >10s trong trường hợp khách không nghe máy':[],
       'Không có cuộc gọi thành công':[], 'result':[], 'link_to_search_callee':[],
       'count_call_log':[], 'fail_pod_reason':[], 'sales_channel':[], 'driver_type':[],
       'affected_by_mass_bug':[], 'final_result':[], 'corrected_dispute':[],
       'affected_by_discreting_bug':[], 'Không có cuộc gọi tiêu chuẩn':[],
       'Không có hình ảnh POD':[], 'disputing':[], 'count_valid_call_log':[],
       'shipper_id':[], 'shipper_name':[], 'first_attempt_date':[]
  })
  
  lst_driver_id = df['driver_id'].unique()
  for i in lst_driver_id:
    a = df[df['driver_id']==i]
    try:
      data = data.append(a.sample(50))
    except:
      data = data.append(a)

  return data

# data_sample = sample_data('/content/drive/MyDrive/VN-QA/29. QA - Data Analyst/FakeFail/Sampling model/_qa_vn__plan_for_ff_pod_manual_check_2022_2022-12-19T04_30_35.64012Z.csv', '2022-12-11', '2022-12-27')

# data_sample.shape

# data_sample.driver_id.value_counts()

# data_sample.to_csv("data_sampe_11_12_to_17_12.csv")

# data_sample['reason'].value_counts()

# data_sample['region'].value_counts()

